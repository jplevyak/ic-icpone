type Profile = record {
  updated_time_msecs: opt nat64;
  username: opt text;
  password: opt text;
  email: opt text;
};

type HeaderField = record { text; text; };

type HttpRequest = record {
  method: text;
  url: text;
  headers: vec HeaderField;
  body: blob;
};

type HttpResponse = record {
  status_code: nat16;
  headers: vec HeaderField;
  body: blob;
};

service icpone: {
  register:  (Profile) -> (Profile);
  login:  () -> (Profile) query;
  set_profile: (Profile) -> (Profile);
  // Backup/restore map from principal (in text) to Profile(s).
  backup: (offset: nat32, count: nat32) -> (vec record { text; Profile }) query;
  restore: (vec record { text; Profile }) -> ();
  authorize: (principal) -> ();
  deauthorize: (principal) -> ();
  get_authorized: () -> (vec principal) query;
  // Raw backup/restore interface.
  // Note: stable authorizations do not survive re-deploy.
  stable_authorize: (principal) -> ();
  stable_size : () -> (nat64) query;
  stable_read : (nat64, nat64) -> (vec nat8) query;
  stable_write : (nat64, vec nat8) -> ();
  // Authorize controllers for all backup/restore operations.
  authorize_controllers: () -> ();  // For all backup/restore.
  // Http interface
  http_request: (request: HttpRequest) -> (HttpResponse) query;
}
